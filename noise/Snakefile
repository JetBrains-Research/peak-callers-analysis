import os
import re
from glob import glob

if not os.path.exists(config['bam_dir']):
    raise ValueError(f"Reads directory not exists: {config['bam_dir']}")
BAM_PATHS = list(glob(os.path.join(config['bam_dir'], '*.bam')))

def names_wo_ext(bam_paths):
    return [re.sub('\\.bam$', '', os.path.basename(p)) for p in bam_paths]

# # use this file as a basic config file in your working directory
# # if you'd like to customise it: fix it directly or override required args
# # using --config options or from --configfile file.
# configfile: "config.yaml"

onstart:
    print(f"Working directory: {os.getcwd()}")
    print(f"Snakefile directory: {workflow.basedir}")
    print(f"Environment: TMPDIR={os.environ.get('TMPDIR', '<n/a>')}")
    print(f"Environment: PATH={os.environ.get('PATH', '<n/a>')} ")
    print(f"Config: ", *[f'{k}: {v}' for k, v in config.items()], sep = "\n  ")
    print("TOOLS: ")
    os.system('echo "  bash: $(which bash)"')
    os.system('echo "  PYTHON: $(which python)"')
    os.system('echo "  CONDA: $(which conda)"')
    os.system('echo "  SNAKEMAKE: $(which snakemake)"')
    os.system('echo "  PYTHON VERSION: $(python --version)"')
    os.system('echo "  CONDA VERSION: $(conda --version)"')
    os.system('')

    # check shell (cond not work properly due to shell detection issues
    print("Snakemake shell check")
    shell('echo "  SNAKEMAKE VERSION: $(snakemake --version)"')

    # Let's create symlinks for several pipeline source dirs to simplify
    for pipeline_dir in ['scripts', 'envs']:
        if not os.path.exists(pipeline_dir):
            src_dir = os.path.join(workflow.basedir , pipeline_dir)
            if os.path.exists(src_dir):
                print(f"Linking '{pipeline_dir}' directory:")
                shell(f"ln -sf {src_dir} {pipeline_dir}")


include: "rules/snr.smk"
include: "rules/mix.smk"
include: "rules/visualize.smk"
include: "rules/macs2.smk"
include: "rules/sicer.smk"
include: "rules/span.smk"

wildcard_constraints:
    sample="[^/]+"

localrules: all

rule all:
    input:
        # Signal to noise ratio computations
        rules.all_snr_results.input,
        # Mix all
        rules.all_mix_results.input,
        # BigWig
        rules.all_reads_coverage_results.input,
        # MACS2
        rules.all_macs2_results.input,
        # SICER
        rules.all_sicer_results.input,
        # SPAN
        rules.all_span_tuned_results.input
